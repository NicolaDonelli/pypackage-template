[project]
name = "{{PROJECT_NAME}}"
authors = [
    {name = "Nicola Donelli", email = "nicoladonelli87@gmail.com"}
]
description = "{{PROJECT_DESCRIPTION}}"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
license = {text = "MIT"}
requires-python = ">={{PYTHON_VERSION}}"
dynamic = ["version"]
dependencies = [
    "tomli>=2.0.1",
    "typing-extensions>=4.0"
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "{{GITHUB_REPO}}"

[dependency-groups]
base = [
    "uv>=0.8.4",
    "pre-commit>=4.0.1",
]
dev = [
    {include-group = "base"},
    "git-cliff>=2.10.0",
    "m2r2>=0.3.3",
    "mypy>=0.910",
    "mypy-extensions>=0.4.3",
    "licensecheck>=2025.1.0",
    "pydoclint>=0.6.6",
    "pytest>=7.0.1",
    "pytest-cov>=3.0",
    "pytest-rerunfailures>=14.0",
    "pytest-xdist>=3.6.1",
    "pytest_env>=1.1.5",
    "pywin32>=310; platform_system == 'Windows'",
    "pywinpty>=2.0.15; platform_system == 'Windows'",
    "recommonmark>=0.7",
    "ruff>=0.12.7",
    "Sphinx<4.4; python_version <= '3.7'",
    "Sphinx>4.1; python_version > '3.7'",
    "sphinx-book-theme>=1.1.3",
]

[build-system]
requires = ["setuptools>=68.0", "setuptools_scm[toml]>=7.1"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
zip-safe = false
include-package-data = true
license-files = ["LICENSE"]

[tool.setuptools.packages.find]
exclude = [
    "tests*",
    "build*",
    "dist*",
    "sphinx*",
    "docs*",
    "terraform*",
    "bin*",
]

[tool.setuptools_scm]
version_scheme = "no-guess-dev"

[tool.uv]
cache-keys = [{ file = "pyproject.toml" }, { git = { commit = true, tags = true } }]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--doctest-modules --cov=./{{SRC}}"
log_cli = 1
log_cli_level = "info"
log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.report]
fail_under = 75
show_missing = true
skip_covered = true

[tool.coverage.run]
branch = true
omit = [
    "{{SRC}}/__init__.py",
]

[tool.ruff]
include = ["pyproject.toml", "{{SRC}}/**/*.py", "tests/**/*.py"]
line-length = 88 # Same as Black.
indent-width = 4 # Same as Black.
target-version = "py311"

[tool.ruff.format]
quote-style = "double" # Like Black, use double quotes for strings.
indent-style = "space" # Like Black, indent with spaces, rather than tabs.
skip-magic-trailing-comma = false # Like Black, respect magic trailing commas.
line-ending = "auto" # Like Black, automatically detect the appropriate line ending.
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
# This is currently disabled by default, but it is planned for this to be opt-out in the future.
docstring-code-format = true
# Set the line length limit used when formatting code snippets in docstrings.
# This only has an effect when the `docstring-code-format` setting is enabled.
docstring-code-line-length = 20

[tool.ruff.lint]
ignore = [
    'W191', # tab-indentation
    'E111', # indentation-with-invalid-multiple
    'E114', # indentation-with-invalid-multiple-comment
    'E117', # over-indented
    'D206', # docstring-tab-indentation
    'D300', # triple-single-quotes
    'Q000', # bad-quotes-inline-string
    'Q001', # bad-quotes-multiline-string
    'Q002', # bad-quotes-docstring
    'Q003', # avoidable-escaped-quote
    'COM812', # missing-trailing-comma
    'COM819', # prohibited-trailing-comma
    'ISC002', # multi-line-implicit-string-concatenation
    'E501', # line-too-long
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"{{SRC}}/__init__.py" = ["E722"]
'tests/**/*.py' = ["D"]

[tool.ruff.lint.mccabe]
max-complexity = 7

[tool.ruff.lint.isort]
known-first-party = ['{{SRC}}','tests']

[tool.sphinx]
package_dir = "{{SRC}}"
name = "{{PROJECT_NAME}}"

[tool.licensecheck]
using = "requirements:requirements/requirements.txt"
ignore_packages = []
zero = true

[tool.pydoclint]
style = 'sphinx'
arg-type-hints-in-signature = true
arg-type-hints-in-docstring = false
allow-init-docstring = true
require-return-section-when-returning-nothing = false
check-return-types = false
require-yield-section-when-yielding-nothing = false
check-yield-types = false
check-style-mismatch = true

[tool.mypy]
packages = ["{{SRC}}", "tests"]
explicit_package_bases = true
namespace_packages = true
follow_imports = "silent"
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true # This flag disallows usage of generic types that do not specify explicit type parameters. For example, you can’t use a bare x: list. Instead, you must always write something like x: list[int].
disallow_subclassing_any = true # This flag reports an error whenever a class subclasses a value of type Any. This may occur when the base class is imported from a module that doesn’t exist (when using --ignore-missing-imports) or is ignored due to --follow-imports=skip or a # type: ignore comment on the import statement.
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
implicit_reexport = true
strict_equality = false

[tool.git-cliff.changelog]
header = """
# Changelog\n
All notable changes to project '{{PROJECT_NAME}}' will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %} [**BREAKING**] {% endif %} {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
    {% endfor %}
{% endfor %}\n
"""
footer = ""
output = "CHANGELOG.md"
trim = true

[tool.git-cliff.bump]
initial_tag = '0.0.1'
breaking_always_bump_major = false
features_always_bump_minor = false

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
tag_pattern='v\d{1,2}\.\d{1,2}\.\d{1,2}'
split_commits = false
commit_parsers = [
    { message = "^feat", group = "Features"},
    { message = "^fix", group = "Bug Fixes"},
    { message = "^doc", group = "Documentation", default_scope = "documentation"},
    { message = "^perf", group = "Performance", default_scope = "preformance improvement"},
    { message = "^refactor", group = "Refactor"},
    { message = "^style", group = "Styling", default_scope = "style improvement"},
    { message = "^test", group = "Testing", default_scope = "tests"},
    { message = "^chore", skip = true},
]
# If set to true, commits that are not matched by commit_parsers are filtered out.
filter_commits = true
protect_breaking_commits = true
sort_commits = "newest"
topo_order = false
# see [git] section for more keys
