# {{PROJECT_NAME}}

This project contains the python package known as "{{PROJECT_NAME}}". It requires Python {{PYTHON_VERSION}}.

## Run the application

### Clone the application
Clone the code directly from the repository:
```
git clone {{GITHUB_REPO}}
cd "$(basename "{{GITHUB_REPO}}" .git)"
```

### Prerequisites

### Set environment variables
You need to set a few environment variables in your local environment:
```
PROJECT_DIR=PATH_TO_THIS_REPOSITORY
```
This variable contain the path that points to the repository root. The corresponding value is also used in CI/CD workflows
```
ENV=dev OR prod
```
This variable defines the environment. It can be set to either "dev" or "prod" and will be used locally to define the 
configuration file to use.

### Enable dynamic Circleci configs
To store service account credentials in Circleci:
1. save the content of the json key file of the service account as CircleCI environment variable by navigating to 
_Project Settings > Environment Variables_ in the [CircleCI web app](https://app.circleci.com/).
2. go to the [CircleCI web app](https://app.circleci.com/) and make sure to activate 
_Project Settings > Advanced > Enable dynamic config using setup workflows_.

The first step would be required for the CI/CD workflows to be able to access Google resources while the second one is 
required to be able to use multiple configuration files for CircleCI itself. 


## Repository structure
After initialization repository is structured according to the following schema
```
PROJECT_DIR
│   README.md
│   Dockerfile      ==>  list of docker instructions to build imge
│   Makefile        ==>  list of make commands
│   LICENESE        ==>  project license
│   pyproject.toml  ==>  project configurations
│   .giattributes   ==>  file that gives attributes to pathnames
│   .gitignore      ==>  list of patterns to ignore with git
│   .dockerignore   ==>  list of patterns to ignore while building docker image
│
└───.circleci
│   │   config.yml  ==> setup circleci configuration
│   │   main.yml  ==> CI and CD workflows with circleci
│
└───.github
│   │   RELEASE-TEMPLATE.md  ==> Template file for release notes, to be updated by realease action
│   │
│   └───workflows
│       │   continous-delivery.yml  ==> CD workflow
│       │   continous-integration.yml  ==> CI workflow
│       │   github-page-build-and-deploy.yml  ==> build and deploy github page with code documentation
│
└───{{SRC}}
│   │   __init__.py  ==> file containing version number
│   │   py.typed     ==> empty file required by mypy to recognize a typed package
│   │   _version.py  ==> utilities to extract semantic versioning from tags
│   
└───bin ==> folder that will contain executable files
│   
└───requirements
│   │   requirements.in  ==> application's open requirements
│   │   requirements.txt  ==> application's closed requirements, as built by make reqs
│   │   requirements_dev.in  ==> development environment's open requirements
│   │   requirements_dev.txt  ==> development environment's open requirements, as built by make reqs_dev
│   
└───sphinx ==> sphinx documentation folder containig varius files that will be used to compile code documentations
│   │   ... 
│   
└───tests ==> unit-tests module
    │   __init__.py
```


## Tools for the project

### GNU Make
This project uses [GNU make](https://www.gnu.org/software/make/) to orchestrate of some complex common actions. 
In particular the processes of compiling and installing requirements, running checks (static typing, linting, unittests, etc), 
compiling documentation, building a docker image and running it are streamlined within the Makefile and can be run using 
simple make commands.
To get a complete list of available make commands the user can simply type `make help` but the most relevant are:
* ``make setup``, to setup the minimal environment required for the application
* ``make setup_dev``, to setup the full development environment (i.e. including dependencies required for quality checks)
* ``make install``, to install the package with minimal requirements
* ``make install_dev``, to install the package with development requirements
* ``make checks``, to check formatting, linting, static typing and running unit-tests
* ``make docs``, to build and compile html documentation using sphinx

### Requirements tracking
This project uses ``pip-tools`` to keep track of requirements. In particular there is a ``requirements`` folder 
containing a ``requirements.in, requirements.txt, requirements_dev.in, requirements_dev.txt`` files corresponding to 
input (``*.in``) and actual (``*.txt``) requirements files for dev and prod environments.


### Code formatting
This project uses [`black`](https://black.readthedocs.io/en/stable/) for formatting and enforcing a coding style and 
[`isort`](https://pycqa.github.io/isort/) for automatically sorting imports. 
Their configurations are included in `pyproject.toml` configuration file.
Run ``make format`` to reformat all source code and tests files according to `black` and `isort` standards.

### Linting
This project uses [`flake8`](https://flake8.pycqa.org/en/latest/) for coding style checking. 
Its configurations are included in `pyproject.toml` configuration file. 
It coincides with the configuration suggested by the `black` developers. 
Run `make lint` to analyse all source code and tests files.

### Type hints
This project uses [`mypy`](http://mypy-lang.org/) for static type checking. Its configuration is included in `pyproject.toml`.
The only settings included in this configuration files are related to the missing typing annotations of some common third party libraries.

### Security checks
This project uses [`bandit`](https://bandit.readthedocs.io/en/latest//) for security checks. Its configuration is included in `pyproject.toml`.
It is currently set to check for issues of high severity and with high confidence.

### License compatibility checks
This project uses [`licensecheck`](https://github.com/FHPythonUtils/LicenseCheck) to check compatibility between the license of this package and the ones of its depencencies. Its configuration is included in `pyproject.toml`.
It is currently set to ignore dependency issues between locally-developed packages.

### Documentation
This project uses [`Sphinx`](https://www.sphinx-doc.org/en/master/) as a tool to create documentation. 
Run `make docs` to automatically build documentation.
There is a Github workflow setup to publish documentation on the repo's Github Page at every push on `main` branch. 
To let this action run smoothly there must exist the `gh_pages`branch and the Github Page must be manually setted (from
github repo web interface > Settings > Pages) to use `gh_pages` as source branch and `/root` as source folder. 
Since this action requires a GITHUB_TOKEN, for its first run in the repo it will be necessary to follow the steps 
detailed [here]( https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-first-deployment-with-github_token) 
to make the action run fine from then on.

### Semantic Versioning
This project automatically applies semantic versioning based on tags using a modified setup of [`versioneer`](https://github.com/python-versioneer/python-versioneer). 
The configuration is included in ``pyproject.toml``.  

## Continuous Integration and Continuous Delivery
CI/CD workflows can be performed with either GithubActions of Circleci but, in any case, the same steps are performed.

### CI workflow
This workflow is activated only by commits on an open Pull Request and consists of the following steps:
1. Check the application, by running ``make checks`` on checked-out code.
2. Check code quality using Sonarqube.
 